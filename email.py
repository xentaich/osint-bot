import os
import re
import aiohttp
import logging
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥–∞
load_dotenv()
TOKEN = os.getenv("BOT_TOKEN")
HIBP_API_KEY = os.getenv("HIBP_API_KEY")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

bot = Bot(token=TOKEN)
dp = Dispatcher()

# --- –í–∞–ª–∏–¥–∞—Ü–∏—è ---
def is_phone(phone: str) -> bool:
    return re.match(r"^\+?[0-9\s\-]{10,15}$", phone) is not None

def is_ip(ip: str) -> bool:
    try:
        socket.inet_aton(ip)
        return True
    except socket.error:
        return False

def is_email(email: str) -> bool:
    return re.match(r"^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$", email) is not None

# --- API-–∑–∞–ø—Ä–æ—Å—ã ---
async def check_phone(phone: str) -> dict:
    url = f"https://htmlweb.ru/geo/api.php?json&telcod={phone}"
    async with aiohttp.ClientSession() as session:
        try:
            async with session.get(url, timeout=10) as resp:
                data = await resp.json()
                return {
                    "country": data.get("country", {}).get("name", "N/A"),
                    "operator": data.get("0", {}).get("oper", "N/A"),
                    "valid": "–î–∞" if data.get("0", {}).get("mobile") else "–ù–µ—Ç"
                }
        except Exception as e:
            logger.error(f"Phone API error: {e}")
            return {"error": "API error"}

async def check_ip(ip: str) -> dict:
    url = f"http://ip-api.com/json/{ip}"
    async with aiohttp.ClientSession() as session:
        try:
            async with session.get(url, timeout=10) as resp:
                data = await resp.json()
                return {
                    "country": data.get("country", "N/A"),
                    "city": data.get("city", "N/A"),
                    "isp": data.get("isp", "N/A")
                }
        except Exception as e:
            logger.error(f"IP API error: {e}")
            return {"error": "API error"}

async def check_email(email: str) -> dict:
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Ç–µ—á–µ–∫ —á–µ—Ä–µ–∑ Have I Been Pwned
    headers = {"hibp-api-key": HIBP_API_KEY}
    url = f"https://haveibeenpwned.com/api/v3/breachedaccount/{email}"
    
    async with aiohttp.ClientSession() as session:
        try:
            async with session.get(url, headers=headers) as resp:
                if resp.status == 200:
                    breaches = await resp.json()
                    return {
                        "breaches": [b["Name"] for b in breaches][:5],
                        "count": len(breaches)
                    }
                return {"breaches": [], "count": 0}
        except Exception as e:
            logger.error(f"Email API error: {e}")
            return {"error": "API error"}

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ---
def get_phone_kb(phone: str) -> InlineKeyboardMarkup:
    buttons = [
        [InlineKeyboardButton(text="WhatsApp", url=f"https://wa.me/{phone}")],
        [InlineKeyboardButton(text="Telegram", url=f"tg://resolve?phone={phone}")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ---
@dp.message(Command("start"))
async def start(message: types.Message):
    await message.answer(
        "üîç OSINT Bot\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ:\n"
        "- –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (+79123456789)\n"
        "- IP-–∞–¥—Ä–µ—Å\n"
        "- Email –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏"
    )

@dp.message(F.text)
async def handle_query(message: types.Message):
    query = message.text.strip()
    
    if is_phone(query):
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        data = await check_phone(query)
        if "error" in data:
            await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏")
            return
            
        text = (
            f"üì± –ù–æ–º–µ—Ä: {query}\n"
            f"üåç –°—Ç—Ä–∞–Ω–∞: {data['country']}\n"
            f"üì∂ –û–ø–µ—Ä–∞—Ç–æ—Ä: {data['operator']}\n"
            f"‚úÖ –í–∞–ª–∏–¥–Ω–æ—Å—Ç—å: {data['valid']}"
        )
        await message.answer(text, reply_markup=get_phone_kb(query))
        
    elif is_ip(query):
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ IP
        data = await check_ip(query)
        if "error" in data:
            await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏")
            return
            
        text = (
            f"üñ•Ô∏è IP: {query}\n"
            f"üåç –°—Ç—Ä–∞–Ω–∞: {data['country']}\n"
            f"üèôÔ∏è –ì–æ—Ä–æ–¥: {data['city']}\n"
            f"üì∂ –ü—Ä–æ–≤–∞–π–¥–µ—Ä: {data['isp']}"
        )
        await message.answer(text)
        
    elif is_email(query):
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ email
        data = await check_email(query)
        if "error" in data:
            await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏")
            return
            
        text = f"üìß Email: {query}\n"
        if data["count"] > 0:
            text += f"‚ö†Ô∏è –ù–∞–π–¥–µ–Ω –≤ {data['count']} —É—Ç–µ—á–∫–∞—Ö:\n"
            text += "\n".join(f"‚îú {b}" for b in data["breaches"])
        else:
            text += "‚úÖ –ù–µ –Ω–∞–π–¥–µ–Ω –≤ –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —É—Ç–µ—á–∫–∞—Ö"
        await message.answer(text)
        
    else:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞")

# --- –ó–∞–ø—É—Å–∫ ---
if __name__ == "__main__":
    dp.run_polling(bot)